{"version":3,"file":"colon.min.js","sources":["../src/init/construct.js","../src/compile/walk.js","../src/compile/domify.js","../src/common/utils.js","../src/common/extend.js","../src/common/dom.js","../src/compile/generate.js","../src/compile/index.js","../src/init/compile.js","../src/init/computed.js","../src/init/index.js","../src/index.js","../src/compile/parse.js","../src/configure.js","../src/directives/if.js","../src/directives/src.js","../src/directives/show.js","../src/directives/text.js","../src/directives/each.js","../src/directives/style.js","../src/directives/class.js","../src/directives/attribute.js","../src/directive.js","../src/compile/utils.js"],"sourcesContent":["export default function initConstruct(co) {\n    co.data = co.options.data || {};\n\n    /**\n     * Gets Value in Data\n     * @param {String} key\n     * @return {String} Value of key in data\n     */\n    co.get = key => co.data[key];\n}\n","/**\n * walk dom element\n *\n * @param {DOM}   el\n * @param {Function}   action\n * @param {Function} done\n */\nexport default function walk(el, action, done) {\n    const nodes = el.childNodes && [].slice.call(el.childNodes);\n\n    done = done || function () {};\n    action = action || function () {};\n\n    function next(skip) {\n        if (skip || nodes.length === 0) return done();\n        walk(nodes.shift(), action, next);\n    }\n\n    action(el, next);\n}\n","/**\n * Converts a string into a DOM element\n *\n * @param {String} DOMString\n * @return {DOM}\n */\nexport default function domify(DOMString) {\n    const html = document.implementation.createHTMLDocument();\n\n    html.body.innerHTML = DOMString;\n\n    return html.body.children;\n}\n","export function format(name, separator) {\n    const RE = /([a-z]|(?:[A-Z0-9]+))([A-Z0-9]|$)/g;\n\n    return name.replace(RE, (_, $1, $2) => $1 + ($2 && (separator || '-') + $2)).toLowerCase();\n}\n\nexport function each(items, callback) {\n    let len, i = 0;\n\n\tif (Array.isArray(items)) {\n\t\tlen = items.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif (callback.call(items[i], items[i], i) === false) return items;\n\t\t}\n\t} else {\n\t\tfor ( i in items ) {\n            if (callback.call(items[i], items[i], i) === false) return items;\n\t\t}\n\t}\n\n\treturn items;\n}\n\nexport function type(object) {\n    const class2type = {};\n    const type = class2type.toString.call(object);\n    const typeString = 'Boolean Number String Function Array Date RegExp Object Error Symbol';\n\n    if (object == null) return `${object}`;\n\n    typeString.split(' ').forEach(type => class2type[`[object ${type}]`] = type.toLowerCase());\n\n    return (\n        typeof object === 'object' ||\n        typeof object === 'function'\n        ?\n        class2type[type] || 'object'\n        :\n        typeof object\n    );\n}\n\nexport function isPlainObject(object) {\n    const class2type = {};\n    const toString = class2type.toString;\n    const hasOwn = class2type.hasOwnProperty;\n    const fnToString = hasOwn.toString;\n    const ObjectFunctionString = fnToString.call(Object);\n\n    let prototype, ctor;\n\n    if (!object || toString.call(object) !== '[object Object]') return false;\n\n    prototype = Object.getPrototypeOf(object);\n\n    if (!prototype) return true;\n\n    ctor = hasOwn.call(prototype, 'constructor') && prototype.constructor;\n\n    return typeof ctor === 'function' && fnToString.call( ctor ) === ObjectFunctionString;\n}\n","import { type, isPlainObject } from './utils';\n\n/**\n * Extend object\n *\n * @method extend\n * @return {Object} object\n */\nexport default function extend() {\n    let options, name, clone, copy, source, copyIsArray,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    if (typeof target === 'boolean') {\n        deep = target;\n        target = arguments[i] || {};\n        i++;\n    }\n\n    if (typeof target !== 'object' && type(target) !== 'function') {\n        target = {};\n    }\n\n    if (i === length) {\n        target = this;\n        i--;\n    }\n\n    for (; i < length; i++) {\n        //\n        if ((options = arguments[i]) !== null) {\n            // for in source object\n            for (name in options) {\n\n                source = target[name];\n                copy = options[name];\n\n                if (target == copy) {\n                    continue;\n                }\n\n                // deep clone\n                if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                    // if copy is array\n                    if (copyIsArray) {\n                        copyIsArray = false;\n                        // if is not array, set it to array\n                        clone = source && Array.isArray(source) ? source : [];\n                    } else {\n                        // if copy is not a object, set it to object\n                        clone = source && isPlainObject(source) ? source : {};\n                    }\n\n                    target[name] = extend(deep, clone, copy);\n                } else if (copy !== undefined) {\n                    target[name] = copy;\n                }\n            }\n        }\n    }\n\n    return target;\n}\n","// reference: https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/class-util.js#L7-L26\nexport function addClass(el, cls) {\n    if (!cls || !(cls = cls.trim())) return;\n\n    if (el.classList) {\n        if (cls.indexOf(' ') > -1) {\n            cls.split(/\\s+/).forEach(c => el.classList.add(c));\n        } else {\n            el.classList.add(cls);\n        }\n    } else {\n        const current = ` ${el.getAttribute('class') || ''} `;\n        if (current.indexOf(` ${cls} `) < 0) {\n            el.setAttribute('class', (current + cls).trim());\n        }\n    }\n}\n\n// reference: https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/class-util.js#L32-L61\nexport function removeClass(el, cls) {\n    if (!cls || !(cls = cls.trim())) return;\n\n    if (el.classList) {\n        if (cls.indexOf(' ') > -1) {\n            cls.split(/\\s+/).forEach(c => el.classList.remove(c));\n        } else {\n            el.classList.remove(cls);\n        }\n        if (!el.classList.length) el.removeAttribute('class');\n    } else {\n        let cur = ` ${el.getAttribute('class') || ''} `;\n        const tar = ` ${cls} `;\n        while (cur.indexOf(tar) >= 0) {\n            cur = cur.replace(tar, ' ');\n        }\n        cur = cur.trim();\n        cur ? el.setAttribute('class', cur) : el.removeAttribute('class');\n    }\n}\n","const dependencyRE = /\"[^\"]*\"|'[^']*'|\\.\\w*[a-zA-Z$_]\\w*|\\w*[a-zA-Z$_]\\w*:|(\\w*[a-zA-Z$_]\\w*)/g;\nconst globals = [\n    'true', 'false', 'undefined', 'null', 'NaN', 'isNaN', 'typeof', 'in',\n    'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'unescape',\n    'escape', 'eval', 'isFinite', 'Number', 'String', 'parseFloat', 'parseInt',\n];\n\nexport function generate(expression) {\n    const dependencies = extractDependencies(expression);\n    let dependenciesCode = '';\n\n    dependencies.map(dependency => dependenciesCode += `var ${dependency} = this.get(\"${dependency}\"); `);\n\n    return new Function(`${dependenciesCode}return ${expression};`);\n}\n\nexport function extractDependencies(expression) {\n    const dependencies = [];\n\n    expression.replace(dependencyRE, (match, dependency) => {\n        if (\n            dependency !== undefined &&\n            dependencies.indexOf(dependency) === -1 &&\n            globals.indexOf(dependency) === -1\n        ) {\n            dependencies.push(dependency);\n        }\n    });\n\n    return dependencies;\n}\n","import walk from './walk';\nimport parse from './parse';\nimport domify from './domify';\nimport defaults from './defaults';\nimport extend from '../common/extend';\nimport configure from '../configure';\nimport Directive from '../directive';\nimport { hasInterpolation } from './utils';\n\nexport default function Compile(template, options = {}) {\n    if (!(this instanceof Compile)) return new Compile(template, options);\n\n    if (template instanceof Node) {\n        options.template = template;\n    } else if (typeof template === 'string') {\n        [template] = domify(template);\n        options.template = template;\n    } else if (typeof template !== 'string') {\n        options = template;\n    }\n\n    this.options = extend(true, defaults, options);\n    this.co = this.options.co;\n    template = this.options.template;\n\n    walk(template, (node, next) => {\n        if (node.nodeType === 1) {\n            const skip = this.compile.elementNodes.call(this, node);\n            return next(skip === false);\n        } else if (node.nodeType === 3) {\n            this.compile.textNodes.call(this, node);\n        }\n        next();\n    });\n\n    this.view = template;\n    template = null;\n}\n\nCompile.prototype.compile = {};\n\n/**\n * compile element nodes\n *\n * @param {Node} node\n * @return {Void|Boolean}\n */\nCompile.prototype.compile.elementNodes = function (node) {\n    let attributes = [].slice.call(node.attributes),\n        attrName = ``,\n        attrValue = ``,\n        directiveName = ``;\n\n    if (node.hasAttributes() && this.bindPriority(node)) return false;\n\n    attributes.map(attribute => {\n        attrName = attribute.name;\n        attrValue = attribute.value.trim();\n\n        if (attrName.indexOf(configure.identifier.bind) === 0 && attrValue !== '') {\n            directiveName = attrName.slice(configure.identifier.bind.length);\n\n            this.bindDirective({\n                node,\n                expression: attrValue,\n                name: directiveName,\n            });\n            node.removeAttribute(attrName);\n        } else {\n            this.bindAttribute(node, attribute);\n        }\n    });\n};\n\n/**\n * compile text nodes.\n *\n * @param {Node} node\n * @return {Void|Boolean}\n */\nCompile.prototype.compile.textNodes = function (node) {\n    if (node.textContent.trim() === '') return false;\n    const el = document.createTextNode('');\n    node.parentNode.insertBefore(el, node);\n    this.bindDirective({\n        node: el,\n        name: 'text',\n        expression: parse.text(node.textContent),\n    });\n\n    node.parentNode.removeChild(node);\n};\n\n/**\n * bind directive\n *\n * @param {Object} options - directive options\n */\nCompile.prototype.bindDirective = function (options) {\n    new Directive({\n        ...options,\n        co: this.co,\n    });\n};\n\n/**\n * bind attribute.\n *\n * @param {Node} node\n * @param {Node} attribute\n */\nCompile.prototype.bindAttribute = function (node, attribute) {\n    if (!hasInterpolation(attribute.value) || attribute.value.trim() == '') return false;\n\n    this.bindDirective({\n        node,\n        name: 'attribute',\n        expression: parse.text(attribute.value),\n        attrName: attribute.name,\n    });\n};\n\n/**\n * bind priority directive.\n *\n * @param {Node} node\n * @return {Boolean}\n */\nCompile.prototype.bindPriority = function (node) {\n    let attrValue,\n        directive;\n\n    for (let i = 0; i < configure.priority.length; i++) {\n        directive = configure.priority[i];\n        attrValue = node.getAttribute(`${configure.identifier.bind}${directive}`);\n\n        if (attrValue) {\n            attrValue = attrValue.trim();\n            if (!attrValue) return false;\n\n            node.removeAttribute(`${configure.identifier.bind}${directive}`);\n            this.bindDirective({\n                node,\n                name: directive,\n                expression: attrValue,\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n","import Compile from '../compile/index';\n\nexport default function initCompile(co) {\n    co.$Compile = Compile;\n\n    co.view = co.$Compile(co.options.template, {\n        data: co.data,\n        co,\n    }).view;\n}\n","export default function initComputed(co) {\n    const computed = co.options.computed;\n\n    if (!computed) return;\n\n    let descriptor, prop;\n\n    for (prop in computed) {\n        descriptor = computed[prop];\n\n        if (typeof descriptor === 'function') {\n            descriptor = {\n                get: descriptor,\n            };\n\n            descriptor.enumerable = true;\n            descriptor.configurable = true;\n            \n            Object.defineProperty(co.data, prop, descriptor);\n        }\n    }\n}\n","import initConstruct from './construct';\nimport initCompile from './compile';\nimport initComputed from './computed';\n\nexport default function init(co) {\n    initConstruct(co);\n    initComputed(co);\n    initCompile(co);\n}\n","import init from './init/index';\n\nexport default function colon(options) {\n    if (!(this instanceof colon)) return new colon(options);\n\n    this.options = options;\n    init(this);\n}\n","const tagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\n\nexport default {\n    text(text) {\n        // reference: https://github.com/vuejs/vue/blob/dev/src/compiler/parser/text-parser.js#L15-L41\n        if (!tagRE.test(text)) return JSON.stringify(text);\n\n        const tokens = [];\n        let lastIndex = tagRE.lastIndex = 0;\n        let index, matched;\n\n        while (matched = tagRE.exec(text)) {\n            index = matched.index;\n            if (index > lastIndex) {\n                tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n            }\n            tokens.push(matched[1].trim());\n            lastIndex = index + matched[0].length;\n        }\n\n        if (lastIndex < text.length) tokens.push(JSON.stringify(text.slice(lastIndex)));\n\n        return tokens.join('+');\n    },\n};\n","export default {\n    identifier: {\n        bind: `:`,\n    },\n    priority: [\n        'each',\n    ],\n};\n","import configure from '../configure';\n\nexport default {\n    bind() {\n        this.holder = document.createComment(`${configure.identifier.bind}${this.name}`);\n        this.node.parentNode.replaceChild(this.holder, this.node);\n    },\n    update(show) {\n        if (show) this.holder.parentNode.replaceChild(this.node, this.holder);\n    },\n};\n","export default {\n    update(src) {\n        this.node.setAttribute(this.name, src);\n    },\n};\n","export default {\n    update(show) {\n        this.node.style.display = show ? `block` : `none`;\n    },\n};\n","export default {\n    update(value) {\n        this.node.textContent = value;\n    },\n};\n","import configure from '../configure';\nimport colon from '../index';\n\nexport default {\n    bind() {\n        this.holder = document.createComment(`${configure.identifier.bind}${this.name}`);\n        this.node.parentNode.replaceChild(this.holder, this.node);\n\n        // parse alias\n        this.itemName = `item`;\n        this.indexName = `index`;\n        this.dataName = this.expression;\n\n        if (this.expression.indexOf(' in ') != -1) {\n            const bracketRE = /\\(((?:.|\\n)+?)\\)/g;\n            const [item, data] = this.expression.split(' in ');\n            let matched = null;\n\n            if (matched = bracketRE.exec(item)) {\n                const [item, index] = matched[1].split(',');\n                index ? this.indexName = index.trim() : '';\n                this.itemName = item.trim();\n            } else {\n                this.itemName = item.trim();\n            }\n\n            this.dataName = data.trim();\n        }\n\n        this.expression = this.dataName;\n    },\n    update(data) {\n        if (data && !Array.isArray(data)) return;\n\n        const fragment = document.createDocumentFragment();\n\n        data.map((item, index) => {\n            const co = colon({\n                template: this.node.cloneNode(true),\n                data: {\n                    [this.itemName]: item,\n                    [this.indexName]: index,\n                },\n            });\n            fragment.appendChild(co.options.template);\n        });\n\n        this.holder.parentNode.replaceChild(fragment, this.holder);\n    },\n};\n","import { each, type } from '../common/utils';\n\nexport default {\n    update(style) {\n        each(style, (item, i) => {\n            if (type(item) === 'object') {\n                each(item, (value, key) => this.node.style[key] = value);\n            } else {\n                this.node.style[i] = item;\n            }\n        });\n    },\n};\n","import { each, type } from '../common/utils';\nimport { addClass, removeClass } from '../common/dom';\n\nexport default {\n    update(clus) {\n        each(clus, (item, i) => {\n            if (type(item) === 'object') {\n                each(item, (value, key) => value ? addClass(this.node, key) : removeClass(this.node, key));\n            } else {\n                const className = type(i) === 'number' ? item : i;\n                item ? addClass(this.node, className) : removeClass(this.node, className);\n            }\n        });\n    },\n};\n","export default {\n    update(value) {\n        this.node.setAttribute(this.attrName, value);\n    },\n};\n","import directives from './directives/index';\nimport { generate } from './compile/generate';\n\nexport default class Directive {\n    constructor(options = {}) {\n        if (options.name === 'if') options.name = `IF`;\n        if (options.name === 'class') options.name = `clus`;\n\n        Object.assign(this, options);\n        Object.assign(this, directives[this.name]);\n        this.bindData();\n    }\n\n    bindData() {\n        if (!this.expression) return;\n        this.bind && this.bind();\n        this.update && this.update(generate(this.expression).call(this.co));\n    }\n}\n","export const hasInterpolation = text => /\\{?\\{\\{(.+?)\\}\\}\\}?/g.test(text);\n"],"names":["initConstruct","co","data","options","get","key","walk","el","action","done","next","skip","nodes","length","shift","childNodes","slice","call","domify","DOMString","html","document","implementation","createHTMLDocument","body","innerHTML","children","each","items","callback","len","i","Array","isArray","type","object","class2type","toString","split","forEach","toLowerCase","isPlainObject","hasOwn","hasOwnProperty","fnToString","ObjectFunctionString","Object","prototype","ctor","getPrototypeOf","constructor","extend","name","clone","copy","source","copyIsArray","target","arguments","deep","this","undefined","addClass","cls","trim","classList","indexOf","add","c","current","getAttribute","setAttribute","removeClass","remove","removeAttribute","cur","tar","replace","generate","expression","dependencies","extractDependencies","dependenciesCode","map","dependency","Function","dependencyRE","match","globals","push","Compile","template","Node","defaults","node","nodeType","_this","compile","elementNodes","textNodes","view","initCompile","$Compile","initComputed","computed","descriptor","prop","enumerable","configurable","defineProperty","init","colon","tagRE","text","test","JSON","stringify","tokens","lastIndex","index","matched","exec","join","holder","createComment","configure","identifier","bind","parentNode","replaceChild","show","src","style","display","value","textContent","itemName","indexName","dataName","bracketRE","item","fragment","createDocumentFragment","cloneNode","appendChild","clus","className","attrName","Directive","assign","directives","bindData","update","hasInterpolation","attributes","attrValue","directiveName","hasAttributes","bindPriority","attribute","bindDirective","bindAttribute","createTextNode","insertBefore","parse","removeChild","directive","priority"],"mappings":"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"}