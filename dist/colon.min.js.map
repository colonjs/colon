{"version":3,"file":"colon.min.js","sources":["../src/init/construct.js","../src/compile/walk.js","../src/compile/domify.js","../src/common/utils.js","../src/common/extend.js","../src/common/dom.js","../src/compile/generate.js","../src/compile/index.js","../src/init/compile.js","../src/init/computed.js","../src/init/index.js","../src/index.js","../src/compile/parse.js","../src/configure.js","../src/directives/if.js","../src/directives/src.js","../src/directives/show.js","../src/directives/text.js","../src/directives/each.js","../src/directives/style.js","../src/directives/class.js","../src/directives/attribute.js","../src/directive.js","../src/compile/utils.js"],"sourcesContent":["export default function initConstruct(co) {\n    co.data = co.options.data || {};\n\n    /**\n     * Gets Value in Data\n     * @param {String} key\n     * @return {String} Value of key in data\n     */\n    co.get = key => co.data[key];\n}\n","/**\n * walk dom element\n *\n * @param {DOM}   el\n * @param {Function}   action\n * @param {Function} done\n */\nexport default function walk(el, action, done) {\n    const nodes = el.childNodes && [].slice.call(el.childNodes);\n\n    done = done || function () {};\n    action = action || function () {};\n\n    function next(skip) {\n        if (skip || nodes.length === 0) return done();\n        walk(nodes.shift(), action, next);\n    }\n\n    action(el, next);\n}\n","/**\n * Converts a string into a DOM element\n *\n * @param {String} DOMString\n * @return {DOM}\n */\nexport default function domify(DOMString) {\n    const html = document.implementation.createHTMLDocument();\n\n    html.body.innerHTML = DOMString;\n\n    return html.body.children;\n}\n","export function format(name, separator) {\n    const RE = /([a-z]|(?:[A-Z0-9]+))([A-Z0-9]|$)/g;\n\n    return name.replace(RE, (_, $1, $2) => $1 + ($2 && (separator || '-') + $2)).toLowerCase();\n}\n\nexport function each(items, callback) {\n    let len, i = 0;\n\n\tif (Array.isArray(items)) {\n\t\tlen = items.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif (callback.call(items[i], items[i], i) === false) return items;\n\t\t}\n\t} else {\n\t\tfor ( i in items ) {\n            if (callback.call(items[i], items[i], i) === false) return items;\n\t\t}\n\t}\n\n\treturn items;\n}\n\nexport function type(object) {\n    const class2type = {};\n    const type = class2type.toString.call(object);\n    const typeString = 'Boolean Number String Function Array Date RegExp Object Error Symbol';\n\n    if (object == null) return `${object}`;\n\n    typeString.split(' ').forEach(type => class2type[`[object ${type}]`] = type.toLowerCase());\n\n    return (\n        typeof object === 'object' ||\n        typeof object === 'function'\n        ?\n        class2type[type] || 'object'\n        :\n        typeof object\n    );\n}\n\nexport function isPlainObject(object) {\n    const class2type = {};\n    const toString = class2type.toString;\n    const hasOwn = class2type.hasOwnProperty;\n    const fnToString = hasOwn.toString;\n    const ObjectFunctionString = fnToString.call(Object);\n\n    let prototype, ctor;\n\n    if (!object || toString.call(object) !== '[object Object]') return false;\n\n    prototype = Object.getPrototypeOf(object);\n\n    if (!prototype) return true;\n\n    ctor = hasOwn.call(prototype, 'constructor') && prototype.constructor;\n\n    return typeof ctor === 'function' && fnToString.call( ctor ) === ObjectFunctionString;\n}\n","import { type, isPlainObject } from './utils';\n\n/**\n * Extend object\n *\n * @method extend\n * @return {Object} object\n */\nexport default function extend() {\n    let options, name, clone, copy, source, copyIsArray,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    if (typeof target === 'boolean') {\n        deep = target;\n        target = arguments[i] || {};\n        i++;\n    }\n\n    if (typeof target !== 'object' && type(target) !== 'function') {\n        target = {};\n    }\n\n    if (i === length) {\n        target = this;\n        i--;\n    }\n\n    for (; i < length; i++) {\n        //\n        if ((options = arguments[i]) !== null) {\n            // for in source object\n            for (name in options) {\n\n                source = target[name];\n                copy = options[name];\n\n                if (target == copy) {\n                    continue;\n                }\n\n                // deep clone\n                if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                    // if copy is array\n                    if (copyIsArray) {\n                        copyIsArray = false;\n                        // if is not array, set it to array\n                        clone = source && Array.isArray(source) ? source : [];\n                    } else {\n                        // if copy is not a object, set it to object\n                        clone = source && isPlainObject(source) ? source : {};\n                    }\n\n                    target[name] = extend(deep, clone, copy);\n                } else if (copy !== undefined) {\n                    target[name] = copy;\n                }\n            }\n        }\n    }\n\n    return target;\n}\n","export function addClass(el, cls) {\n    if (!cls || !(cls = cls.trim())) return;\n\n    if (el.classList) {\n        if (cls.indexOf(' ') > -1) {\n            cls.split(/\\s+/).forEach(c => el.classList.add(c));\n        } else {\n            el.classList.add(cls);\n        }\n    } else {\n        const current = ` ${el.getAttribute('class') || ''} `;\n        if (current.indexOf(` ${cls} `) < 0) {\n            el.setAttribute('class', (current + cls).trim());\n        }\n    }\n}\n\nexport function removeClass(el, cls) {\n    if (!cls || !(cls = cls.trim())) return;\n\n    if (el.classList) {\n        if (cls.indexOf(' ') > -1) {\n            cls.split(/\\s+/).forEach(c => el.classList.remove(c));\n        } else {\n            el.classList.remove(cls);\n        }\n        if (!el.classList.length) el.removeAttribute('class');\n    } else {\n        let cur = ` ${el.getAttribute('class') || ''} `;\n        const tar = ` ${cls} `;\n        while (cur.indexOf(tar) >= 0) {\n            cur = cur.replace(tar, ' ');\n        }\n        cur = cur.trim();\n        cur ? el.setAttribute('class', cur) : el.removeAttribute('class');\n    }\n}\n","const expressionRE = /\"[^\"]*\"|'[^']*'|\\.\\w*[a-zA-Z$_]\\w*|\\w*[a-zA-Z$_]\\w*:|(\\w*[a-zA-Z$_]\\w*)/g;\nconst globals = ['true', 'false', 'undefined', 'null', 'NaN', 'typeof', 'in'];\n\nexport function generate(expression) {\n    const dependencies = extractDependencies(expression);\n    let dependenciesCode = '';\n\n\tfor(let i = 0; i < dependencies.length; i++) {\n        const dependency = dependencies[i];\n        dependenciesCode += `var ${dependency} = this.get(\"${dependency}\"); `;\n\t}\n\n    return new Function(`${dependenciesCode}return ${expression};`);\n}\n\nexport function extractDependencies(expression) {\n    const dependencies = [];\n\n    expression.replace(expressionRE, function(match, reference) {\n        if(\n            reference !== undefined &&\n            dependencies.indexOf(reference) === -1 &&\n            globals.indexOf(reference) === -1\n        ) {\n            dependencies.push(reference);\n        }\n    });\n\n    return dependencies;\n}\n","import walk from './walk';\nimport parse from './parse';\nimport domify from './domify';\nimport defaults from './defaults';\nimport extend from '../common/extend';\nimport configure from '../configure';\nimport Directive from '../directive';\nimport { hasInterpolation } from './utils';\n\nexport default function Compile(template, options = {}) {\n    if (!(this instanceof Compile)) return new Compile(template, options);\n\n    if (template instanceof Node) {\n        options.template = template;\n    } else if (typeof template === 'string') {\n        [template] = domify(template);\n        options.template = template;\n    } else if (typeof template !== 'string') {\n        options = template;\n    }\n\n    this.options = extend(true, defaults, options);\n    this.co = this.options.co;\n    template = this.options.template;\n\n    walk(template, (node, next) => {\n        if (node.nodeType === 1) {\n            const skip = this.compile.elementNodes.call(this, node);\n            return next(skip === false);\n        } else if (node.nodeType === 3) {\n            this.compile.textNodes.call(this, node);\n        }\n        next();\n    });\n\n    this.view = template;\n    template = null;\n}\n\nCompile.prototype.compile = {};\n\n/**\n * compile element nodes\n *\n * @param {Node} node\n * @return {Void|Boolean}\n */\nCompile.prototype.compile.elementNodes = function (node) {\n    let attributes = [].slice.call(node.attributes),\n        attrName = ``,\n        attrValue = ``,\n        directiveName = ``;\n\n    if (node.hasAttributes() && this.bindPriority(node)) return false;\n\n    attributes.map(attribute => {\n        attrName = attribute.name;\n        attrValue = attribute.value.trim();\n\n        if (attrName.indexOf(configure.identifier.bind) === 0 && attrValue !== '') {\n            directiveName = attrName.slice(configure.identifier.bind.length);\n\n            this.bindDirective({\n                node,\n                expression: attrValue,\n                name: directiveName,\n            });\n            node.removeAttribute(attrName);\n        } else {\n            this.bindAttribute(node, attribute);\n        }\n    });\n};\n\n/**\n * compile text nodes.\n *\n * @param {Node} node\n * @return {Void|Boolean}\n */\nCompile.prototype.compile.textNodes = function (node) {\n    if (node.textContent.trim() === '') return false;\n    const el = document.createTextNode('');\n    node.parentNode.insertBefore(el, node);\n    this.bindDirective({\n        node: el,\n        name: 'text',\n        expression: parse.text(node.textContent),\n    });\n\n    node.parentNode.removeChild(node);\n};\n\n/**\n * bind directive\n *\n * @param {Object} options - directive options\n */\nCompile.prototype.bindDirective = function (options) {\n    new Directive({\n        ...options,\n        co: this.co,\n    });\n};\n\n/**\n * bind attribute.\n *\n * @param {Node} node\n * @param {Node} attribute\n */\nCompile.prototype.bindAttribute = function (node, attribute) {\n    if (!hasInterpolation(attribute.value) || attribute.value.trim() == '') return false;\n\n    this.bindDirective({\n        node,\n        name: 'attribute',\n        expression: parse.text(attribute.value),\n        attrName: attribute.name,\n    });\n};\n\n/**\n * bind priority directive.\n *\n * @param {Node} node\n * @return {Boolean}\n */\nCompile.prototype.bindPriority = function (node) {\n    let attrValue,\n        directive;\n\n    for (let i = 0; i < configure.priority.length; i++) {\n        directive = configure.priority[i];\n        attrValue = node.getAttribute(`${configure.identifier.bind}${directive}`);\n\n        if (attrValue) {\n            attrValue = attrValue.trim();\n            if (!attrValue) return false;\n\n            node.removeAttribute(`${configure.identifier.bind}${directive}`);\n            this.bindDirective({\n                node,\n                name: directive,\n                expression: attrValue,\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n};\n","import Compile from '../compile/index';\n\nexport default function initCompile(co) {\n    co.$Compile = Compile;\n\n    co.view = co.$Compile(co.options.template, {\n        data: co.data,\n        co,\n    }).view;\n}\n","export default function initComputed(co) {\n    const computed = co.options.computed;\n\n    if (!computed) return;\n\n    let descriptor, prop;\n\n    for (prop in computed) {\n        descriptor = computed[prop];\n\n        if (typeof descriptor === 'function') {\n            descriptor = {\n                get: descriptor,\n            };\n\n            descriptor.enumerable = true;\n            descriptor.configurable = true;\n            \n            Object.defineProperty(co.data, prop, descriptor);\n        }\n    }\n}\n","import initConstruct from './construct';\nimport initCompile from './compile';\nimport initComputed from './computed';\n\nexport default function init(co) {\n    initConstruct(co);\n    initComputed(co);\n    initCompile(co);\n}\n","import init from './init/index';\n\nexport default function colon(options) {\n    if (!(this instanceof colon)) return new colon(options);\n\n    this.options = options;\n    init(this);\n}\n","const tagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\n\nexport default {\n    text(text) {\n        if (!tagRE.test(text)) return JSON.stringify(text);\n\n        const tokens = [];\n        let lastIndex = tagRE.lastIndex = 0;\n        let index, matched;\n\n        while (matched = tagRE.exec(text)) {\n            index = matched.index;\n            if (index > lastIndex) {\n                tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n            }\n            tokens.push(matched[1].trim());\n            lastIndex = index + matched[0].length;\n        }\n\n        if (lastIndex < text.length) tokens.push(JSON.stringify(text.slice(lastIndex)));\n\n        return tokens.join('+');\n    },\n};\n","export default {\n    identifier: {\n        bind: `:`,\n    },\n    priority: [\n        'each',\n    ],\n};\n","import configure from '../configure';\n\nexport default {\n    bind() {\n        this.holder = document.createComment(`${configure.identifier.bind}${this.name}`);\n        this.node.parentNode.replaceChild(this.holder, this.node);\n    },\n    update(show) {\n        if (show) this.holder.parentNode.replaceChild(this.node, this.holder);\n    },\n};\n","export default {\n    update(src) {\n        this.node.setAttribute(this.name, src);\n    },\n};\n","export default {\n    update(show) {\n        this.node.style.display = show ? `block` : `none`;\n    },\n};\n","export default {\n    update(value) {\n        this.node.textContent = value;\n    },\n};\n","import configure from '../configure';\nimport colon from '../index';\n\nexport default {\n    bind() {\n        this.holder = document.createComment(`${configure.identifier.bind}${this.name}`);\n        this.node.parentNode.replaceChild(this.holder, this.node);\n    },\n    update(data) {\n        if (data && !Array.isArray(data)) return;\n\n        const fragment = document.createDocumentFragment();\n\n        data.map((item, index) => {\n            const co = colon({\n                template: this.node.cloneNode(true),\n                data: {\n                    item,\n                    index,\n                },\n            });\n            fragment.appendChild(co.options.template);\n        });\n\n        this.holder.parentNode.replaceChild(fragment, this.holder);\n    },\n};\n","import { format, each, type } from '../common/utils';\n\nexport default {\n    update(style) {\n        each(style, (item, i) => {\n            if (type(item) === 'object') {\n                each(item, (value, key) => this.node.style[format(key)] = value);\n            } else {\n                this.node.style[format(i)] = item;\n            }\n        });\n    },\n};\n","import { each, type } from '../common/utils';\nimport { addClass, removeClass } from '../common/dom';\n\nexport default {\n    update(clus) {\n        each(clus, (item, i) => {\n            if (type(item) === 'object') {\n                each(item, (value, key) => value ? addClass(this.node, key) : removeClass(this.node, key));\n            } else {\n                const className = type(i) === 'number' ? item : i;\n                item ? addClass(this.node, className) : removeClass(this.node, className);\n            }\n        });\n    },\n};\n","export default {\n    update(value) {\n        this.node.setAttribute(this.attrName, value);\n    },\n};\n","import directives from './directives/index';\nimport { generate } from './compile/generate';\n\nexport default class Directive {\n    constructor(options = {}) {\n        if (options.name === 'if') options.name = `IF`;\n        if (options.name === 'class') options.name = `clus`;\n\n        Object.assign(this, options);\n        Object.assign(this, directives[this.name]);\n        this.bindData();\n    }\n\n    bindData() {\n        if (!this.expression) return;\n        this.bind && this.bind();\n        this.update && this.update(generate(this.expression).call(this.co));\n    }\n}\n","export const hasInterpolation = text => /\\{?\\{\\{(.+?)\\}\\}\\}?/g.test(text);\n"],"names":["initConstruct","co","data","options","get","key","walk","el","action","done","next","skip","nodes","length","shift","childNodes","slice","call","domify","DOMString","html","document","implementation","createHTMLDocument","body","innerHTML","children","format","name","separator","replace","_","$1","$2","toLowerCase","each","items","callback","len","i","Array","isArray","type","object","class2type","toString","split","forEach","isPlainObject","hasOwn","hasOwnProperty","fnToString","ObjectFunctionString","Object","prototype","ctor","getPrototypeOf","constructor","extend","clone","copy","source","copyIsArray","target","arguments","deep","this","undefined","addClass","cls","trim","classList","indexOf","add","c","current","getAttribute","setAttribute","removeClass","remove","removeAttribute","cur","tar","generate","expression","dependencies","extractDependencies","dependenciesCode","dependency","Function","expressionRE","match","reference","globals","push","Compile","template","Node","defaults","node","nodeType","_this","compile","elementNodes","textNodes","view","initCompile","$Compile","initComputed","computed","descriptor","prop","enumerable","configurable","defineProperty","init","colon","tagRE","text","test","JSON","stringify","tokens","lastIndex","index","matched","exec","join","holder","createComment","configure","identifier","bind","parentNode","replaceChild","show","src","style","display","value","textContent","fragment","createDocumentFragment","map","item","cloneNode","appendChild","clus","className","attrName","Directive","assign","directives","bindData","update","hasInterpolation","attributes","attrValue","directiveName","hasAttributes","bindPriority","attribute","bindDirective","bindAttribute","createTextNode","insertBefore","parse","removeChild","directive","priority"],"mappings":"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"}